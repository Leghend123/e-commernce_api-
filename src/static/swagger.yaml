swagger: "2.0"
info:
  title: E-Commerce API
  description: API documentation for E-Commerce
  version: "1.0.0"
host: localhost:5000
basePath: /api/v1
schemes:
  - http
securityDefinitions:
  AdminBearer:
    type: apiKey
    name: Authorization
    in: header
    description: "JWT Token for Admin"

  CustomerBearer:
    type: apiKey
    name: Authorization
    in: header
    description: "JWT Token for Customer"

paths:
  /admin/login:
    post:
      tags:
        - Auth
      summary: Admin Login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Admin login details
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: Login successful
        400:
          description: Invalid credentials

  /admin/create_new_admin:
    post:
      tags:
        - Admin
      summary: Add New Admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Create new admin
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: New admin added successfully
        400:
          description: Failed to add new admin
      security:
        - AdminBearer: []

  /admin/refresh_token:
    get:
      tags:
        - Auth
      summary: Refresh Access Token
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for refresh token
          required: true
          schema:
            type: object
            properties:
      responses:
        200:
          description: New access token returned successfully
          schema:
            type: object
            properties:
              access_token:
                type: string
        401:
          description: Invalid or expired refresh token
      security:
        - AdminBearer: []

  /customer/customer_login:
    post:
      tags:
        - Auth
      summary: customer Login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: customer login details
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: Login successful
        400:
          description: Invalid credentialsS

  /admin/current_admin:
    get:
      tags:
        - Admin
      summary: me
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: New access token returned successfully
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
        401:
          description: Invalid or expired refresh token
      security:
        - AdminBearer: []

  /admin/all_admin:
    get:
      tags:
        - Admin
      summary: all admins
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: admins return successfully
          schema:
            type: object
            properties:
              email:
                type: string
              id:
                type: string
              profile:
                type: int
              username:
                type: string

        400:
          description: Failed
      security:
        - AdminBearer: []

  /admin/{admin_id}:
    get:
      tags:
        - Admin
      summary: Get admins by ID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: admin_id
          description: ID of the admin to get
          required: true
          type: string
      responses:
        200:
          description: admin return successfully
          schema:
            type: object
            properties:
              id:
                type: integer
              username:
                type: string
              email:
                type: string
              created_at:
                type: string

        401:
          description: Unauthorized
        404:
          description: Not Found !

      security:
        - AdminBearer: []

  /admin/{id}:
    delete:
      tags:
        - Admin
      summary: Delete Admin
      description: Deletes an admin user by ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the admin to delete
          required: true
          type: string

      responses:
        200:
          description: Admin deleted successfully
        401:
          description: Unauthorized
        404:
          description: Admin not found
        400:
          description: Invalid admin ID
      security:
        - AdminBearer: []

  /admin/{_id}:
    put:
      tags:
        - Admin
      summary: Edit Admin
      description: Edits an admin user by ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: _id
          description: ID of the admin to edit
          required: true
          type: string
        - in: body
          name: body
          description: edit admin
          required: true
          schema:
            type: object
            properties:
              username:
                type: string

      responses:
        200:
          description: Admin edit successfully
        401:
          description: Unauthorized
        404:
          description: Admin not found
        400:
          description: Invalid admin ID`
      security:
        - AdminBearer: []

  /admin/category:
    post:
      tags:
        - Admin
      summary: Add New category
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Create new  Category
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
      responses:
        201:
          description: New Category created successfully
        400:
          description: Failed to create new  Category
      security:
        - AdminBearer: []

  /admin/add_products:
    post:
      tags:
        - Admin
      summary: Add products
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Create new product
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              price:
                type: number
                format: float
              stock:
                type: integer
              image_url:
                type: string
              category_name:
                type: string

      responses:
        201:
          description: New product added successfully
        400:
          description: Failed to add new product
      security:
        - AdminBearer: []

  /customer/register:
    post:
      tags:
        - Customer
      summary: Customer registration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Customer Registration
          required: true
          schema:
            type: object
            properties:
              firstname:
                type: string
              lastname:
                type: string
              username:
                type: string
              email:
                type: string
              city:
                type: string
              password:
                type: string
                format: password
              contact:
                type: string
              address:
                type: string

      responses:
        201:
          description: successfully registered
        400:
          description: Failed to register
      # security:
      #   - CustomerBearer: []

  /customer/password_reset:
    post:
      tags:
        - Customer
      summary: Forgot Password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Forgot Password
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        200:
          description: success

        400:
          description: Failed
      security:
        - CustomerBearer: []

  /customer/reset_password_confrim/{token}:
    post:
      tags:
        - Customer
      summary: Confirm Reset Password
      description: Confirm the password reset using the provided token and a new password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: token
          description: Token provided for resetting the password
          required: true
          type: string
        - in: body
          name: body
          description: New password details
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                format: password
                description: New password for the customer
                example: "new_secure_password"
      responses:
        200:
          description: Password reset confirmed successfully
        400:
          description: Password reset failed (e.g., invalid token or bad request)
      security:
        - CustomerBearer: []

  /customer/profile_update:
    put:
      tags:
        - Customer
      summary: Porfile update
      description: Customer to update his/her profile.
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Update Profile
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              contact:
                type: string
              address:
                type: string
      responses:
        200:
          description: Profile updated successfully
        401:
          description: Unauthorized
        404:
          description: Customer not found
        400:
          description: Invalid admin ID
      security:
        - CustomerBearer: []

  /customer/changePassword:
    put:
      tags:
        - Customer
      summary: Change Password
      description: Customer to change password.
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Change Password
          required: true
          schema:
            type: object
            properties:
              old_password:
                type: string
                format: password
              new_password:
                type: string
                format: password
      responses:
        200:
          description: Change password successfully
        401:
          description: Unauthorized
        404:
          description: Customer not found
        400:
          description: Invalid password format
      security:
        - CustomerBearer: []

  /category/category_list:
    get:
      tags:
        - Category
      summary: Retrieve all categories
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Retrieve successfully
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
        400:
          description: Failed to retrieve categories

  /product/product_list:
    get:
      tags:
        - Product
      summary: Retrieve all products
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved product list
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                description:
                  type: string
                price:
                  type: float
                stock:
                  type: integer
                image_url:
                  type: string
                category_name:
                  type: string
        400:
          description: Failed to retrieve product list

  /carts/add_cart:
    post:
      tags:
        - Cart
      summary: Add a product to the cart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: product
          in: body
          required: true
          schema:
            type: object
            properties:
              product_id:
                type: integer
              # product_name:
              #   type: string
              # price:
              #   type: number
              #   format: float
              quantity:
                type: integer
                default: 1
      responses:
        200:
          description: Successfully added product to the cart
          schema:
            type: object
            properties:
              msg:
                type: string
        400:
          description: Invalid input or missing parameters
          schema:
            type: object
            properties:
              error:
                type: string

  /carts/view_cart:
    get:
      tags:
        - Cart
      summary: Retrieve the current user's cart
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved cart
          schema:
            type: object
            properties:
              cart:
                type: array
                items:
                  type: object
                  properties:
                    product_id:
                      type: integer
                    product_name:
                      type: string
                    price:
                      type: number
                      format: float
                    quantity:
                      type: integer
              total_price:
                type: number
                format: float
        400:
          description: Failed to retrieve cart
          schema:
            type: object
            properties:
              error:
                type: string

  /carts/save_cart:
    post:
      tags:
        - Cart
      summary: Save the current user's cart to the database
      produces:
        - application/json
      responses:
        200:
          description: Successfully saved cart to the database
          schema:
            type: object
            properties:
              msg:
                type: string
        400:
          description: Failed to save cart
          schema:
            type: object
            properties:
              error:
                type: string
        500:
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
      security:
        - CustomerBearer: []

  /carts/load_cart:
    get:
      tags:
        - Cart
      summary: Load saved cart from the database after customer login
      produces:
        - application/json
      responses:
        200:
          description: Successfully loaded cart from database
          schema:
            type: object
            properties:
              cart:
                type: array
                items:
                  type: object
                  properties:
                    product_id:
                      type: integer
                    product_name:
                      type: string
                    price:
                      type: number
                      format: float
                    quantity:
                      type: integer
              msg:
                type: string
        400:
          description: Failed to load cart
          schema:
            type: object
            properties:
              error:
                type: string
        500:
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
      security:
        - CustomerBearer: []

  /carts/remove_item:
    post:
      tags:
        - Cart
      summary: Remove an item from the cart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Product ID to remove from cart
          required: true
          schema:
            type: object
            properties:
              product_id:
                type: integer
      responses:
        200:
          description: Item successfully removed from cart

        400:
          description: Failed to remove item from cart
          schema:
            type: object
            properties:
              error:
                type: string
        404:
          description: Item not found in cart
          schema:
            type: object
            properties:
              error:
                type: string
        500:
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string

  /carts/checkout:
    post:
      tags:
        - Cart
      summary: Checkout the cart and create an order
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description:
          required: true
          schema:
            type: object
            properties:
              shipping_address:
                type: string
                description: Shipping address of the customer
              shipping_cost:
                type: number
                format: float
                description: Shipping cost of the customer
      responses:
        200:
          description: Checkout successful, order created
          schema:
            type: object
            properties:
              order_id:
                type: integer
              msg:
                type: string
        400:
          description: Checkout failed due to validation or cart issues
          schema:
            type: object
            properties:
              error:
                type: string
        404:
          description: Cart not found or empty
          schema:
            type: object
            properties:
              error:
                type: string
        500:
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
      security:
        - CustomerBearer: []

  /carts/quantity_update:
    post:
      tags:
        - Cart
      summary: Update the quantity of an item in the cart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Product ID and quantity to update
          required: true
          schema:
            type: object
            properties:
              product_id:
                type: integer
              action:
                type: string
                description: New quantity for the product
      responses:
        200:
          description: Quantity successfully updated
          schema:
            type: object
            properties:
              cart:
                type: array
                items:
                  type: object
                  properties:
                    product_id:
                      type: integer
                    product_name:
                      type: string
                    price:
                      type: number
                      format: float
                    quantity:
                      type: integer
              msg:
                type: string
        400:
          description: Failed to update quantity due to invalid data
          schema:
            type: object
            properties:
              error:
                type: string
        404:
          description: Item not found in cart
          schema:
            type: object
            properties:
              error:
                type: string
        500:
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string

  /order/orders:
    get:
      tags:
        - Orders
      summary: Get a list of all orders for the logged-in customer
      description: Returns a list of orders placed by the customer, along with order ID, order date, and total amount.
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved list of orders
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    order_id:
                      type: integer
                      description: Unique identifier of the order
                    order_date:
                      type: string
                      format: date-time
                      description: The date when the order was placed
                    total_amount:
                      type: number
                      format: float
                      description: The total amount for the order
        404:
          description: No orders found for the customer
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Order not found"
        500:
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"
      security:
        - CustomerBearer: []

  /order/view_order_details:
    post:
      tags:
        - Orders
      summary: Retrieve order details for a customer based on order ID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Order ID to retrieve details
          required: true
          schema:
            type: object
            properties:
              order_id:
                type: integer
                description: ID of the order to retrieve
                example: 12345
      responses:
        200:
          description: Successfully retrieved order details
          schema:
            type: object
            properties:
              order_detail:
                type: array
                description: List of items in the order
                items:
                  type: object
                  properties:
                    order_id:
                      type: integer
                      description: Order ID
                      example: 12345
                    product_id:
                      type: integer
                      description: Product ID
                      example: 101
                    product_name:
                      type: string
                      description: Name of the product
                      example: "Laptop"
                    quantity:
                      type: integer
                      description: Quantity of the product
                      example: 2
                    price:
                      type: number
                      format: float
                      description: Price of the product
                      example: 499.99
                    total_price:
                      type: number
                      format: float
                      description: Total price (quantity * price) for the product
                      example: 999.98
              subtotal:
                type: number
                format: float
                description: Subtotal of the order
                example: 999.98
              shipping_cost:
                type: number
                format: float
                description: Shipping cost for the order
                example: 20.00
              total:
                type: number
                format: float
                description: Total price (subtotal + shipping cost)
                example: 1019.98
              shipping_address:
                type: object
                description: Shipping address for the order

        400:
          description: Invalid order ID or missing parameters
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid order ID"
        404:
          description: Order not found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Order details not found"
        500:
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"
      security:
        - CustomerBearer: []
