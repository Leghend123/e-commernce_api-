swagger: "2.0"
info:
  title: E-Commerce API
  description: API documentation for E-Commerce
  version: "1.0.0"
host: localhost:5000
basePath: /api/v1
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /admin/login:
    post:
      tags:
        - Auth
      summary: Admin Login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Admin login details
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: Login successful
        400:
          description: Invalid credentials

  /admin/create_new_admin:
    post:
      tags:
        - Admin
      summary: Add New Admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Create new admin
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: New admin added successfully
        400:
          description: Failed to add new admin
      security:
        - Bearer: []

  /admin/refresh_token:
    get:
      tags:
        - Auth
      summary: Refresh Access Token
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: Bearer token for refresh token
          required: true

          schema:
            type: object
            properties:
      responses:
        200:
          description: New access token returned successfully
          schema:
            type: object
            properties:
              access_token:
                type: string
        401:
          description: Invalid or expired refresh token
      security:
        - Bearer: []

  /customer/customer_login:
    post:
      tags:
        - Auth
      summary: customer Login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: customer login details
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: Login successful
        400:
          description: Invalid credentialsS

  /admin/current_admin:
    get:
      tags:
        - Admin
      summary: me
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: New access token returned successfully
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
        401:
          description: Invalid or expired refresh token
      security:
        - Bearer: []

  /admin/all_admin:
    get:
      tags:
        - Admin
      summary: all admins
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: admins return successfully
          schema:
            type: object
            properties:
              email:
                type: string
              id:
                type: string
              profile:
                type: int
              username:
                type: string

        400:
          description: Failed
      security:
        - Bearer: []

  /admin/{admin_id}:
    get:
      tags:
        - Admin
      summary: Get admins by ID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: admin_id
          description: ID of the admin to get
          required: true
          type: string
      responses:
        200:
          description: admin return successfully
          schema:
            type: object
            properties:
              id:
                type: integer
              username:
                type: string
              email:
                type: string
              created_at:
                type: string

        401:
          description: Unauthorized
        404:
          description: Not Found !

      security:
        - Bearer: []

  /admin/{id}:
    delete:
      tags:
        - Admin
      summary: Delete Admin
      description: Deletes an admin user by ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the admin to delete
          required: true
          type: string

      responses:
        200:
          description: Admin deleted successfully
        401:
          description: Unauthorized
        404:
          description: Admin not found
        400:
          description: Invalid admin ID
      security:
        - Bearer: []

  /admin/{_id}:
    put:
      tags:
        - Admin
      summary: Edit Admin
      description: Edits an admin user by ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: _id
          description: ID of the admin to edit
          required: true
          type: string
        - in: body
          name: body
          description: edit admin
          required: true
          schema:
            type: object
            properties:
              username:
                type: string

      responses:
        200:
          description: Admin edit successfully
        401:
          description: Unauthorized
        404:
          description: Admin not found
        400:
          description: Invalid admin ID
      security:
        - Bearer: []

  /customer/register:
    post:
      tags:
        - Customer
      summary: Customer registration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Customer Registration
          required: true
          schema:
            type: object
            properties:
              firstname:
                type: string
              lastname:
                type: string
              username:
                type: string
              email:
                type: string
              city:
                type: string
              password:
                type: string
                format: password

      responses:
        201:
          description: successfully registered
        400:
          description: Failed to register
      security:
        - Bearer: []

  /customer/password_reset:
    post:
      tags:
        - Customer
      summary: Forgot Password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Forgot Password
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        200:
          description: success

        400:
          description: Failed
      security:
        - Bearer: []

  /customer/reset_password_confrim/{token}:
    post:
      tags:
        - Customer
      summary: Confirm Reset Password
      description: Confirm the password reset using the provided token and a new password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: token
          description: Token provided for resetting the password
          required: true
          type: string
        - in: body
          name: body
          description: New password details
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                format: password
                description: New password for the customer
                example: "new_secure_password"
      responses:
        200:
          description: Password reset confirmed successfully
        400:
          description: Password reset failed (e.g., invalid token or bad request)
      security:
        - Bearer: []
